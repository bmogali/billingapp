<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:c="http://www.springframework.org/schema/c"
     	xmlns:cxf="http://cxf.apache.org/core"
		xmlns:jaxws="http://cxf.apache.org/jaxws"
		xmlns:jaxrs="http://cxf.apache.org/jaxrs"
		xmlns:p="http://www.springframework.org/schema/p"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:security="http://www.springframework.org/schema/security"
		xsi:schemaLocation="
			http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
			http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
			http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
			http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd">

	<context:annotation-config/>
	<context:property-placeholder location="classpath:jdbc.properties, classpath:configuration.properties"/>

	<import resource="classpath:META-INF/cxf/cxf.xml"/>
	<import resource="classpath:META-INF/cxf/cxf-servlet.xml"/>
	
	
	<bean id="GZIPOutInterceptor" class="org.apache.cxf.transport.common.gzip.GZIPOutInterceptor"/>
	<bean id="compressGZIPFeature" class="com.billingapp.rest.interceptor.InterceptorManager"/>
	<cxf:bus>
	    <cxf:outInterceptors>
	        <ref bean="GZIPOutInterceptor"/>
	    </cxf:outInterceptors>
	    <cxf:features>
	        <ref bean="compressGZIPFeature"/>
	        <cxf:logging/>
	    </cxf:features>
	</cxf:bus>

	<bean id="billingAppDao" class="com.billingapp.rest.dao.BillingAppDaoImpl">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="billingAppRestService" class="com.billingapp.rest.service.BillingAppRestServiceImpl">
		<property name="command" ref="billingAppCommand"/>
	</bean>
	
	<bean id="billingAppCommand" class="com.billingapp.rest.command.BillingAppCommandImpl" depends-on="passwordEncoder">
		<property name="dao" ref="billingAppDao"/>
		<property name="passwordEncoder" ref="passwordEncoder"/>
	</bean>

	<bean id="jsonProvider" class="org.codehaus.jackson.jaxrs.JacksonJsonProvider"/>
	
  	<jaxrs:server id="billingAppREST" address="/rest">
  		<jaxrs:serviceBeans>
  			<ref bean="billingAppRestService"/>
  		</jaxrs:serviceBeans>
  		<jaxrs:providers>
			<ref bean='jsonProvider' />
		</jaxrs:providers>
  	</jaxrs:server>

  	<!-- Hibernate bean configuration start-->
  	
    <bean id="dataSource"
        class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
        p:driverClassName="${jdbc.driverClassName}"
        p:url="${jdbc.databaseurl}" p:username="${jdbc.username}"
        p:password="${jdbc.password}" />
 
 
    <bean id="sessionFactory"
        class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation">
            <value>classpath:hibernate.cfg.xml</value>
        </property>
        <property name="configurationClass">
            <value>org.hibernate.cfg.AnnotationConfiguration</value>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${jdbc.dialect}</prop>
                <prop key="hibernate.show_sql">true</prop>
            </props>
        </property>
    </bean>
    <tx:annotation-driven />
    <bean id="transactionManager"
        class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
  	
  	<!-- Hibernate bean configuration end-->
  	
  	<!-- 
		SPRING SECURITY SETUP
	-->
	
	<bean id="passwordEncoder" class="org.springframework.security.crypto.password.StandardPasswordEncoder">
		<constructor-arg value="VC9rUDHZrBP67QQeazDKjBkB" />
	</bean>
	
	<security:authentication-manager id="restAuthenticationManager">
		<security:authentication-provider user-service-ref="userDetailService">
			<!--
			Default password encoder is PlaintextPasswordEncoder, which fits with our hardcoded users.
			Obviously not a good choice otherwise.
			-->
			<security:password-encoder ref="passwordEncoder"></security:password-encoder>
		</security:authentication-provider>
	</security:authentication-manager>
	
	<security:http 
		realm="Protected API"
		use-expressions="true"
		auto-config="false"
		create-session="stateless"
		entry-point-ref="unauthorizedEntryPoint"
		authentication-manager-ref="restAuthenticationManager">

		<!--
		This is not easily possible, because it causes:
		DEBUG o.s.s.w.a.ExceptionTranslationFilter - Authentication exception occurred; redirecting to authentication entry point
		org.springframework.security.authentication.AuthenticationCredentialsNotFoundException: An Authentication object was not found in the SecurityContext
		-->
		<!--<anonymous enabled="false"/>-->
		<security:custom-filter ref="restAuthenticationFilter" position="FORM_LOGIN_FILTER" />

		<security:intercept-url pattern="/services/rest/user/authenticate" access="permitAll" />
		<security:intercept-url pattern="/services/rest/user/registerUser" access="hasRole('Admin')" />
		<security:intercept-url pattern="/services/rest/user/getRoles" access="hasRole('Admin')" />
		<security:intercept-url pattern="/services/rest/saveTaxRates" access="hasRole('Admin')" />
		<security:intercept-url pattern="/services/rest/**" access="isFullyAuthenticated()" />
	</security:http>
	
	<bean id="unauthorizedEntryPoint" class="com.billingapp.rest.security.UnauthorizedEntryPoint" />
	
	<bean id="userDetailService" class="com.billingapp.rest.security.BillingUserDetailsService">
		<property name="dao" ref="billingAppDao"/>
	</bean>
	
	<bean id="tokenManager" class="com.billingapp.rest.security.TokenManagerImpl"/>

	<bean id="authenticationService" class="com.billingapp.rest.security.AuthenticationServiceImpl"
		c:authenticationManager-ref="restAuthenticationManager" c:tokenManager-ref="tokenManager"/>

	<bean id="restAuthenticationFilter" class="com.billingapp.rest.security.TokenAuthenticationFilter"
		c:authenticationService-ref="authenticationService" c:logoutLink="/logout"/>
	
</beans>
